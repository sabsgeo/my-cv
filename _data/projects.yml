# Project template
- layout: top-middle
  name: Polly Compute
  link: https://elucidata.io/compute/
  quote: >
    A scalable cloud product for code packaging, computation and data exploration for bioinformatician
  description: |
    I am the **technical lead/architect/developer** for this project. In Polly compute, we build a scalable, secure cloud computing infrastructure that meets the data crunching, data exploration needs of bioinformaticians.
    Capabilities of Polly compute include scaling  of,
    - Batch Jobs
    - API requests
    - [Jupyter Notebooks](https://jupyter.org/)
    - [Shiny applications](https://shiny.rstudio.com/)
    - GPU instances
    - [Custom docker domain](https://twitter.com/elucidatacorp/status/1281620885791629315?ref_src=twsrc%5Etfw) like Docker hub to maintain and build private and public dockers

    Polly compute uses,
      - **Kubernetes** and **dockers** as the main underlying technology stack
      - **AWS** and **Azure** cloud as the cloud providers where services such as **AKS**, **EKS**, **DynamoDB**,**S3**, **Lambda**, **CloudWatch**
      - **Terraform** to maintain infrastructure as code
      - **Python**, **Typescript**, **Node**, **R** , **Java** as the main languages 

    Polly compute has two ways it faces the customers over the [web](http://polly.elucidata.io/), and over [terminal](https://www.npmjs.com/package/@elucidatainc/pollycli). 

- layout: top-middle
  name: Scaling desktop applications on cloud
  link: https://docs.elucidata.io/Apps/Host%20Apps.html#desktop-applications
  quote: >
    To scale up and connect to cloud legacy desktop application in the field of bioinformatics
  description: |
    This capability was as developed as the part of Polly compute. This project had two motivations:
      - Make computational resource thirsty desktop application to scale
      - Make desktop applications usable in a browser
    
      This capability is built on top of an opensource project [Apache Guacamole](https://guacamole.apache.org/). In this project, we packaged some applications on top of Apache Guacamole so that bioinformaticians can easily take their desktop applications to the cloud. This project uses:
      - **Docker**, **Kubernetes** as the main technology stack
      - **Python**, **Java** as the main language
      - **AWS** and **Azure** cloud as the cloud providers where services such as **AKS**, **EKS**, **DynamoDB**, **S3**, **Lambda**, **CloudWatch**

- layout: top-middle
  name: Architecture to code and build Angular and Shiny application 
  quote: >
    Ease development of Angular and Shiny application for frontend engineers and data science application developers 
  description: |
    In the platform [Polly](https://polly.elucidata.io), we have a lot of applications developed internally by both frontend developers and data science developers. And all these applications would be built by different team members. But as a platform, we had to make sure that,
      - UI/UX applications look similar
      - The platform features can be added with ease
      - Building and bundling should be efficient for applications

    This project used,
      - **Angular**, **Shiny** and **Yeoman** as the frameworks
      - **Typescript**, **Javascript**, **Python**, **R** as the main languages
      - **CircleCi** for automated building and deployment

    This project gave both Angular developers and Shiny developers
      - A CLI for generating boilerplate of different kinds of application
      - Reusable components, service and scripts which helps to integrate with the platforms
      - CI/CD pipeline for the applications

- layout: top-middle
  name: Polly Platform
  link: https://polly.elucidata.io/
  quote: >
    One stop solution to harness the power of biomedical data
  description: |
    I was a lead developer during the initial phase of the project. During this time, we build the base architecture for the platform. The features of the platform include,
      - Serving and hosting angular application
      - Running computationally intensive analysis
      - Running workflows on platform
      - Sharing of analysis
      - Restoring of analysis

    These features were developed on
      - **AWS** as the cloud provider, where AWS services such as **S3**, **ECS**, **Cloudfront**, **ECR**, **SQS**, **Dynamo**, **RDS**, **Lambda** were used
      - **Python**, **Typescript** as the main languages

- layout: top-middle
  name: El-MAVEN
  link: https://github.com/ElucidataInc/ElMaven
  quote: >
    An open-source high throughput metabolomics tool
  description: |
    I was a lead developer during the initial phase of the project. This tool was  developed at Princeton University. As part of the client project, I took the tool refactored and optimized in terms of speed of execution and memory, and fixed bugs. The tool was build with,
      - **Qt** a the framework
      - **C++** as the main language